module packetcable
{
    namespace "urn:packetcable";
    prefix "pcmm";

    import ietf-yang-types 	{ prefix yang; }
    import ietf-inet-types 	{ prefix inet; }

    description "This module contains the PCMM Converged Cable Access Platform (CCAP) definitions";
    organization "OpenDaylight Project";

    revision 2015-03-14 {
        description "Initial revision of PCMM CCAP definitions";
    }

   
	// Global typedefs
	typedef service-class-name {
        type string;
        description "
	        length 2 to 128 max
	        The Service Class Name is MUST be 2-128 bytes of null-terminated ASCII string. 
	        (Refer to section C.2.2.3.4 of [MULPI]).  This name MUST be padded with null bytes 
	        to align on a 4-byte boundary.
        ";
    }
    typedef service-flow-direction {
	    type enumeration {
		      enum us {
		        value "1";
		        description "Upstream service flow.";
		      }
		      enum ds {
		        value "2";
		        description "Downstream service flow.";
		      }
	  	}
    	description "This value represents the service flow direction.";
  	}
 	typedef tp-protocol {
	    type enumeration {
		      enum tcp_or_udp {
		        value "256";
		        description "Either TCP or UDP protocol match.";
		      }
		      enum tcp {
		        value "6";
		        description "TCP protocol match.";
		      }
		      enum udp {
		        value "17";
		        description "UDP protocol match.";
		      }
	    }
	    description "This value represents the IP transport protocol (or Next Header).";
	 }
	 
	
	// CCAP devices  
	list ccaps {
		description "
			CCAP devices are known by their network name which is any string.
			Each CCAP device has a network address, a list of subscriber IP subnets,
			a list of available Service Class Names, and a COPS connection state.
			";
	    key "ccapId";
		leaf ccapId {
		    type string;
		    	description "CCAP Identity";
		    }
	    uses ccap-attributes;
    }
  
	grouping ccap-attributes {
		description "
			Each CCAP device has a network address, a list of subscriber IP subnets,
			a list of available Service Class Names, and a COPS connection state.
			";
		container network {
			leaf ipAddress {
	        	type inet:ip-address;
	        	description "IP Address of CCAP";
	    	}
	    	leaf port {
	        	type inet:port-number;
	        	description "COPS session TCP port number";
	        	default 3918;
	    	}
	        leaf connected {
	            type boolean;
	            description "COPS session connected state";
	            default false;
	        }
        }
		leaf-list subscriber-subnets {
			type inet:ip-prefix;			
		}
		leaf-list service-class-names {
			type service-class-name;
		}
	}
	
	// PCMM QoS service flows
    container qos {
    	description "
    		PCMM QoS Dynamic Service Flows are organized as a tree by Application/Subscriber/ServiceFlow:
    			Each Application is known by its appId which is any string.
    			Each Subscriber is known by its subId which is a CPE IP address in either IPv4 or IPv6 format.
    			Each ServiceFlow is known by its sfId which is any string.
    		
    		The subscriber's CPE IP address is used to locate the CCAP device that is currently hosting the
    		the Cable Modem that is connected to the subscriber's device. Therefore, it is not necessary
    		for the PCMM applications to know the topology of the CCAP devices and CMs in the network path 
    		to their subscriber devices.
    		
    		Note that each CCAP entry contains a list of connected subscriber IP subnets as well as a list
    		of all Service Class Names (SCNs) available on the CCAP device. 
    		";
		uses pcmm-qos-flows;
    }
    
    grouping pcmm-qos-flows {
        list apps {
            key "appId";
		    leaf appId {
		    	type string;
		    	description "Application Identity";
		    }
            list subs {
                key "subId";
			    leaf subId {
		            type inet:ip-address;
			    	description "Subscriber Identity";
			    }
	            list dsfs {
	                key "dsfId";
				    leaf dsfId {
				    	type string;
				    	description "Dynamic Service Flow Identity";
				    }
				    uses pcmm-qos-flow-attributes; 
	            }
            }
    	}
    }

    grouping pcmm-qos-flow-attributes {
     	uses pcmm-qos-params;
     	uses pcmm-qos-match;
    }
    
    grouping pcmm-qos-params {
    	container qos-params {
		    leaf service-class-name {
		    	type service-class-name;
		    	description "The Service Class Name (SCN). This SCN must be pre-provisioned on the target CCAP";
		    }
			leaf direction {
				type service-flow-direction;
				description "Service Flow Direction (must match SCN dir attribute)";
			}
		}
    }
    
     grouping tp-port-match-ranges {
        container port-match-ranges {
            leaf srcPort-begin {
                type inet:port-number;
                description "TCP/UDP source port range begin.";
            }
            leaf srcPort-end {
                type inet:port-number;
                description "TCP/UDP source port range end.";
            }
            leaf dstPort-begin {
                type inet:port-number;
                description "TCP/UDP destination port range begin.";
            }
            leaf dstPort-end {
                type inet:port-number;
                description "TCP/UDP destination port range end.";
            }
        }
    }
     
    grouping pcmm-qos-match {
    	container match {
	    	leaf srcIp {
	    		type inet:ip-prefix;
	    		description "Source IP prefix match in  <address/len> notation";
			}
	    	leaf dstIp {
	    		type inet:ip-prefix;
	    		description "Destination IP prefix match in <address/len> notation";
			}
	 		leaf dscp {
	 			type inet:dscp;
	 			description "DSCP match";
	 		}
	     	leaf proto {
	    		type tp-protocol;
	    		description "IP transport protocol (or Next Header)";
			}
	 		leaf srcPort {
		        type inet:port-number;
	    		description "TCP/UDP source port (exact match).";
	   		}    	
	 		leaf dstPort {
		        type inet:port-number;
	    		description "TCP/UDP destination port (exact match).";
	   		}
	   		uses tp-port-match-ranges; 
   		}   	
    }    

}
   
